{"version":3,"file":"component---src-pages-index-tsx-dd7fa6fc733ffa23b22b.js","mappings":"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","sources":["webpack://shortform-survey/./src/data/panas.ts","webpack://shortform-survey/./src/components/SurveyQuestion.tsx","webpack://shortform-survey/./src/components/ClearUndoButton.tsx","webpack://shortform-survey/./src/pages/index.tsx"],"sourcesContent":["import React from \"react\";\n\nexport type SurveyQuestion = {\n  title: string,\n  description: string,\n  index: number,\n  code: string,\n}\n\nexport type SurveyQuestionAnswer = {\n  value: number,\n  description: string;\n}\n\nexport const panasQuestions: Array<SurveyQuestion> = [\n  { title: 'Interested', index: 1, code: 'In', description: 'Curious or attentive toward something new.' },\n  { title: 'Distressed', index: 2, code: 'Di', description: 'Uneasy, worried, or in emotional pain.' },\n  { title: 'Excited', index: 3, code: 'Ex', description: 'A heightened sense of anticipation.' },\n  { title: 'Upset', index: 4, code: 'Up', description: 'Emotionally troubled or disturbed.' },\n  { title: 'Strong', index: 5, code: 'St', description: 'Confident, *capable*, and physically or emotionally robust.' },\n  { title: 'Guilty', index: 6, code: 'Gu', description: 'Responsible for wrongdoing or mistakes.' },\n  { title: 'Scared', index: 7, code: 'Sc', description: 'An acute sense of fear or alarm.' },\n  { title: 'Hostile', index: 8, code: 'Ho', description: 'Angry, aggressive, or antagonistic.' },\n  { title: 'Enthusiastic', index: 9, code: 'En', description: 'Hopeful and eager about something meaningful.' },\n  { title: 'Proud', index: 10, code: 'Pr', description: 'A sense of satisfaction and self-worth from achievements.' },\n  { title: 'Irritable', index: 11, code: 'Ir', description: 'Easily annoyed or frustrated.' },\n  { title: 'Alert', index: 12, code: 'Al', description: 'Being awake, alert, and responsive to stimuli.' },\n  { title: 'Ashamed', index: 13, code: 'As', description: 'Embarrassed, disgraced or unworthy' },\n  { title: 'Inspired', index: 14, code: 'Ip', description: 'Uplifted or driven to create or achieve something meaningful.' },\n  { title: 'Nervous', index: 15, code: 'Ne', description: 'Emotionally anxious or uneasy about potential outcomes.' },\n  { title: 'Determined', index: 16, code: 'De', description: 'Motivated, and *resolute* in pursuing goals' },\n  { title: 'Attentive', index: 17, code: 'At', description: 'Focused or fixated on a specific task' },\n  { title: 'Jittery', index: 18, code: 'Ji', description: 'Physically nervous or restless.' },\n  { title: 'Active', index: 19, code: 'Ac', description: 'Alive and energized and ready to engage.' },\n  { title: 'Afraid', index: 20, code: 'Af', description: 'Fearful or apprehensive about something.' },\n];\n\nexport const panasAnswers: Array<SurveyQuestionAnswer> = [\n  { value: 0, description: 'Not at all' },\n  { value: 1, description: 'A little' },\n  { value: 2, description: 'Moderately' },\n  { value: 3, description: 'Quite a bit' },\n  { value: 4, description: 'Extremely' }\n];\n\nexport type SurveyAnswerMap = Map<string, number>;\n\nexport const usePanasState = () => {\n  const [lastSurveyAnsers, setLastSurveyAnwers] = React.useState<SurveyAnswerMap>(new Map());\n\n  const [surveyAnswers, setSurveyAnswers] = React.useState<SurveyAnswerMap>(new Map());\n\n  const updateSurveyAnswers = React.useCallback(({ code, value }: { code: string, value: number }) => {\n    const updatedAnswers = new Map(surveyAnswers);\n\n    updatedAnswers.set(code, value);\n\n    setSurveyAnswers(updatedAnswers);\n  }, [surveyAnswers, setSurveyAnswers])\n\n  const clearAnswers = React.useCallback(() => {\n    if (surveyAnswers.size > 0) {\n      setLastSurveyAnwers(surveyAnswers);\n      setSurveyAnswers(new Map());\n    }\n  }, [surveyAnswers, setLastSurveyAnwers, setSurveyAnswers])\n\n  const undoLastClear = React.useCallback(() => {\n    setSurveyAnswers(lastSurveyAnsers);\n  }, [lastSurveyAnsers, setSurveyAnswers])\n\n  const shortCode = React.useMemo(() => {\n    return surveyAnswers\n      .entries()\n      .filter(([_, value]) => value > 0)\n      .map(([code, value]) => `${code}${value}`)\n      .toArray()\n      .join(',')\n  }, [surveyAnswers]);\n\n  return {\n    surveyAnswers,\n    updateSurveyAnswers,\n    clearAnswers,\n    undoLastClear,\n    shortCode\n  };\n}","import * as React from \"react\"\nimport { panasAnswers } from \"../data/panas\";\nimport \"./SurveyQuestion.css\"\n\nexport type SurveyQuestionProps = {\n  title: string,\n  description: string,\n  code: string,\n  value: number | undefined,\n  onChange: (code: string, score: number) => void\n}\n\n\nexport const QuestionFormItem: React.FC<SurveyQuestionProps> = ({ title, description, code, value, onChange }) => {\n  return (\n    <div style={{marginBottom: 20}}>\n      <h3 style={{marginBottom: 0}}>{title}</h3>\n      <p style={{margin: '8px 0 12px'}}>{description}</p>\n      <fieldset className=\"SurveyQuestion--fieldset\">\n        {panasAnswers.map(({ value: answerValue, description: answerDescription }) => {\n          return (\n            <label \n              className={`SurveyQuestion--label SurveyQuestion--magnitude-${answerValue}`} \n              key={`${code}${answerValue}`} \n              htmlFor={`question-${code}-${answerValue.toString()}`}\n            >\n              <input \n                type=\"radio\"\n                className=\"SurveyQuestion--input\"\n                id={`question-${code}-${answerValue}`} \n                name={`question-${code}`} \n                value={answerValue.toString()}\n                checked={value === answerValue }\n                onChange={() => {\n                  onChange(code, answerValue);\n                }}\n              />\n              <span>{answerDescription}</span>\n            </label>\n          );\n        })}\n      </fieldset>\n    </div>\n  );\n}","import * as React from \"react\"\n\nexport type ClearUndoButtonProps = {\n  clearEffectFn: () => void;\n  undoEffectFn: () => void;\n}\n\ntype ClearUndoMode = 'clear' | 'undo';\n\nconst UNDO_TIMEOUT_MILLIS = 5000;\n\nexport const ClearUndoButton: React.FC<ClearUndoButtonProps> = ({ clearEffectFn, undoEffectFn }) => {\n  const [millisAtLastClear, setMillisAtLastClear] = React.useState<number | null>(null);\n  const [millisSinceClear, setMillisSinceClear] = React.useState<number | null>(null);\n\n  const currentMode: ClearUndoMode = (millisSinceClear === null || millisSinceClear > UNDO_TIMEOUT_MILLIS) ? 'clear' : 'undo';\n\n  const onClearClick = React.useCallback(() => {\n    clearEffectFn();\n    setMillisAtLastClear(window.performance.now());\n    setMillisSinceClear(0);\n  }, [clearEffectFn, setMillisAtLastClear, setMillisSinceClear]);\n\n  const onUndoClick = React.useCallback(() => {\n    undoEffectFn();\n    setMillisAtLastClear(null);\n    setMillisSinceClear(null);\n  }, [clearEffectFn, setMillisAtLastClear, setMillisSinceClear]);\n\n  React.useEffect(() => {\n    let animationFrameId: null | number = null;\n\n    if (currentMode === 'undo') {\n      animationFrameId = window.requestAnimationFrame((timestamp) => {\n        if (millisAtLastClear !== null) {\n          setMillisSinceClear(timestamp - millisAtLastClear);\n        }\n      });\n    }\n\n    return () => {\n      if (animationFrameId !== null) {\n        window.cancelAnimationFrame(animationFrameId);\n      }\n    };\n  }, [setMillisSinceClear, millisAtLastClear, millisSinceClear]);\n\n  if (currentMode === 'clear') {\n    return (<button onClick={onClearClick}>Clear</button>);\n  } else {\n    const percentUndoRemaining = 1 - (millisSinceClear || 0) / UNDO_TIMEOUT_MILLIS;\n    const undoText = (() => {\n      if (percentUndoRemaining > 0.75) {\n        return 'Undo...';\n      } else if (percentUndoRemaining > 0.5) {\n        return 'Undo..';\n      } else if (percentUndoRemaining > 0.25) {\n        return 'Undo.';\n      } else {\n        return 'Undo';\n      }\n    })();\n\n    return (<button onClick={onUndoClick}>{undoText}</button>)\n  } \n}\n","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport { usePanasState, panasQuestions } from \"../data/panas\";\nimport { QuestionFormItem } from \"../components/SurveyQuestion\";\nimport { ClearUndoButton } from \"../components/ClearUndoButton\";\n\nconst pageStyles: React.CSSProperties = {\n  color: \"#232129\",\n  background: '#fefefe',\n  padding: 12,\n  fontFamily: \"Roboto, sans-serif, serif\",\n  maxWidth: 800,\n  margin: '0 auto'\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const { \n    clearAnswers, \n    undoLastClear, \n    updateSurveyAnswers, \n    shortCode, \n    surveyAnswers \n  } = usePanasState();\n\n  const onCopyClick: React.MouseEventHandler<HTMLButtonElement> = React.useCallback((e) => {\n    e.preventDefault();\n\n    navigator.clipboard.writeText(shortCode);\n  }, [shortCode]);\n\n  return (\n    <main style={pageStyles}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <h1>Panas Survey</h1>\n        <ClearUndoButton clearEffectFn={clearAnswers} undoEffectFn={undoLastClear} />\n      </div>\n      <div style={{ marginBottom: 20 }}>\n        { panasQuestions.map(({title, code, index, description}) => \n          <QuestionFormItem \n            key={code}\n            title={title} \n            description={description} \n            code={code}\n            value={surveyAnswers.get(code)}\n            onChange={(code, value) => updateSurveyAnswers({ code, value })}\n          />) \n        }\n      </div>\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 6, paddingBottom: 20 }}>\n        <h2 style={{ margin: 0 }}>Short code:</h2>\n        <code style={{background: '#eee', padding: '3px' }}>{shortCode}</code>\n        <button onClick={onCopyClick}>Copy</button>\n      </div>\n    </main>\n  )\n}\n\nexport default IndexPage\n\nexport const Head: HeadFC = () => <title>Panas Survey</title>\n"],"names":["panasQuestions","title","index","code","description","panasAnswers","value","QuestionFormItem","_ref","onChange","React","style","marginBottom","margin","className","map","_ref2","answerValue","answerDescription","key","htmlFor","toString","type","id","name","checked","ClearUndoButton","clearEffectFn","undoEffectFn","millisAtLastClear","setMillisAtLastClear","millisSinceClear","setMillisSinceClear","currentMode","onClearClick","window","performance","now","onUndoClick","animationFrameId","requestAnimationFrame","timestamp","cancelAnimationFrame","onClick","percentUndoRemaining","undoText","pageStyles","color","background","padding","fontFamily","maxWidth","IndexPage","clearAnswers","undoLastClear","updateSurveyAnswers","shortCode","surveyAnswers","usePanasState","lastSurveyAnsers","setLastSurveyAnwers","Map","setSurveyAnswers","updatedAnswers","set","size","entries","filter","_","_ref3","toArray","join","onCopyClick","e","preventDefault","navigator","clipboard","writeText","display","justifyContent","alignItems","get","flexDirection","gap","paddingBottom","Head"],"sourceRoot":""}
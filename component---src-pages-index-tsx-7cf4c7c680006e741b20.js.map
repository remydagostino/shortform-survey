{"version":3,"file":"component---src-pages-index-tsx-7cf4c7c680006e741b20.js","mappings":"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","sources":["webpack://shortform-survey/./src/data/panas.ts","webpack://shortform-survey/./src/components/SurveyQuestion.tsx","webpack://shortform-survey/./src/pages/index.tsx"],"sourcesContent":["import React from \"react\";\n\nexport type SurveyQuestion = {\n  title: string,\n  description: string,\n  index: number,\n  code: string,\n}\n\nexport type SurveyQuestionAnswer = {\n  value: number,\n  description: string;\n}\n\nexport const panasQuestions: Array<SurveyQuestion> = [\n  { title: 'Interested', index: 1, code: 'In', description: 'Curious or attentive toward something new.' },\n  { title: 'Distressed', index: 2, code: 'Di', description: 'Uneasy, worried, or in emotional pain.' },\n  { title: 'Excited', index: 3, code: 'Ex', description: 'A heightened sense of anticipation.' },\n  { title: 'Upset', index: 4, code: 'Up', description: 'Emotionally troubled or disturbed.' },\n  { title: 'Strong', index: 5, code: 'St', description: 'Confident, *capable*, and physically or emotionally robust.' },\n  { title: 'Guilty', index: 6, code: 'Gu', description: 'Responsible for wrongdoing or mistakes.' },\n  { title: 'Scared', index: 7, code: 'Sc', description: 'An acute sense of fear or alarm.' },\n  { title: 'Hostile', index: 8, code: 'Ho', description: 'Angry, aggressive, or antagonistic.' },\n  { title: 'Enthusiastic', index: 9, code: 'En', description: 'Hopeful and eager about something meaningful.' },\n  { title: 'Proud', index: 10, code: 'Pr', description: 'A sense of satisfaction and self-worth from achievements.' },\n  { title: 'Irritable', index: 11, code: 'Ir', description: 'Easily annoyed or frustrated.' },\n  { title: 'Alert', index: 12, code: 'Al', description: 'Being awake, alert, and responsive to stimuli.' },\n  { title: 'Ashamed', index: 13, code: 'As', description: 'Embarrassed, disgraced or unworthy' },\n  { title: 'Inspired', index: 14, code: 'Ip', description: 'Uplifted or driven to create or achieve something meaningful.' },\n  { title: 'Nervous', index: 15, code: 'Ne', description: 'Emotionally anxious or uneasy about potential outcomes.' },\n  { title: 'Determined', index: 16, code: 'De', description: 'Motivated, and *resolute* in pursuing goals' },\n  { title: 'Attentive', index: 17, code: 'At', description: 'Focused or fixated on a specific task' },\n  { title: 'Jittery', index: 18, code: 'Ji', description: 'Physically nervous or restless.' },\n  { title: 'Active', index: 19, code: 'Ac', description: 'Alive and energized and ready to engage.' },\n  { title: 'Afraid', index: 20, code: 'Af', description: 'Fearful or apprehensive about something.' },\n];\n\nexport const panasAnswers: Array<SurveyQuestionAnswer> = [\n  { value: 0, description: 'Not at all' },\n  { value: 1, description: 'A little' },\n  { value: 2, description: 'Moderately' },\n  { value: 3, description: 'Quite a bit' },\n  { value: 4, description: 'Extremely' }\n]\n\nexport const usePanasState = () => {\n  const [surveyAnswers, setSurveyAnswers] = React.useState(new Map<string, number>());\n\n  const updateSurveyAnswers = React.useCallback(({ code, value }: { code: string, value: number }) => {\n    const updatedAnswers = new Map(surveyAnswers);\n\n    updatedAnswers.set(code, value);\n\n    setSurveyAnswers(updatedAnswers);\n  }, [surveyAnswers, setSurveyAnswers])\n\n  const shortCode = React.useMemo(() => {\n    return surveyAnswers\n      .entries()\n      .filter(([_, value]) => value > 0)\n      .map(([code, value]) => `${code}${value}`)\n      .toArray()\n      .join(',')\n  }, [surveyAnswers]);\n\n  return {\n    surveyAnswers,\n    updateSurveyAnswers,\n    shortCode\n  };\n}","import * as React from \"react\"\nimport { panasAnswers } from \"../data/panas\";\nimport \"./SurveyQuestion.css\"\n\nexport type SurveyQuestionProps = {\n  title: string,\n  description: string,\n  code: string,\n  onChange: (code: string, score: number) => void\n}\n\n\nexport const QuestionFormItem: React.FC<SurveyQuestionProps> = ({ title, description, code, onChange }) => {\n  return (\n    <div style={{marginBottom: 20}}>\n      <h3 style={{marginBottom: 0}}>{title}</h3>\n      <p style={{margin: '8px 0 12px'}}>{description}</p>\n      <fieldset className=\"SurveyQuestion--fieldset\">\n        {panasAnswers.map(({ value, description: answerDescription }) => (\n          <label className={`SurveyQuestion--label SurveyQuestion--magnitude-${value}`} key={`${code}${value}`} id={`question-${code}-${value.toString()}`}>\n            <input \n              type=\"radio\"\n              className=\"SurveyQuestion--input\"\n              id={`question-${code}-0`} \n              name={`question-${code}`} \n              value={value.toString()}\n              onChange={() => {\n                onChange(code, value);\n              }}\n            />\n            <span>{answerDescription}</span>\n          </label>\n        ))}\n      </fieldset>\n    </div>\n  );\n}","import * as React from \"react\"\nimport type { HeadFC, PageProps } from \"gatsby\"\nimport { usePanasState, panasQuestions } from \"../data/panas\";\nimport { QuestionFormItem } from \"../components/SurveyQuestion\";\n\nconst pageStyles: React.CSSProperties = {\n  color: \"#232129\",\n  background: '#fefefe',\n  padding: 12,\n  fontFamily: \"Roboto, sans-serif, serif\",\n  maxWidth: 800,\n  margin: '0 auto'\n}\n\nconst IndexPage: React.FC<PageProps> = () => {\n  const { surveyAnswers, updateSurveyAnswers, shortCode } = usePanasState();\n\n  const onCopyClick: React.MouseEventHandler<HTMLButtonElement> = React.useCallback((e) => {\n    e.preventDefault();\n\n    navigator.clipboard.writeText(shortCode);\n  }, [shortCode]);\n\n  return (\n    <main style={pageStyles}>\n      <h1>Panas Survey</h1>\n      <div style={{ marginBottom: 20 }}>\n        { panasQuestions.map(({title, code, index, description}) => \n          <QuestionFormItem \n            key={code}\n            title={title} \n            description={description} \n            code={code}\n            onChange={(code, value) => updateSurveyAnswers({ code, value })}\n          />) \n        }\n      </div>\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 6, paddingBottom: 20 }}>\n        <h2 style={{ margin: 0 }}>Short code:</h2>\n        <code style={{background: '#eee', padding: '3px' }}>{shortCode}</code>\n        <button onClick={onCopyClick}>Copy</button>\n      </div>\n    </main>\n  )\n}\n\nexport default IndexPage\n\nexport const Head: HeadFC = () => <title>Home Page</title>\n"],"names":["panasQuestions","title","index","code","description","panasAnswers","value","QuestionFormItem","_ref","onChange","React","style","marginBottom","margin","className","map","_ref2","answerDescription","key","id","toString","type","name","pageStyles","color","background","padding","fontFamily","maxWidth","IndexPage","surveyAnswers","updateSurveyAnswers","shortCode","usePanasState","setSurveyAnswers","Map","updatedAnswers","set","entries","filter","_","_ref3","toArray","join","onCopyClick","e","preventDefault","navigator","clipboard","writeText","display","flexDirection","alignItems","gap","paddingBottom","onClick","Head"],"sourceRoot":""}